openapi: 3.0.3
info:
  title: MediLeaf API
  version: 0.0.1
  description: Medicinal Properties Finder with the Power of Leaf
paths:
  /api/v1/forgot-password/:
    post:
      operationId: apiV1ForgotPasswordCreate
      description: |-
        It takes the email address of the user, creates a token and sends an email to the user with a
        link to reset their password

        :param request: The request object
        :return: A response object with a message and a status code.
      summary: Forgot password
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPassword'
          description: ''
  /api/v1/login/:
    post:
      operationId: apiV1LoginCreate
      description: |-
        The function takes in a request, validates the request, logs the user in, and returns a response

        :param request: The request object
        :return: The response is returning a message and the expiration date of the session.
      summary: User Login
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/v1/logout/:
    post:
      operationId: apiV1LogoutCreate
      description: |-
        It logs out the user and flushes the session

        :param request: The request object
        :return: A response object with a message and a status code.
      summary: User Logout
      tags:
      - Account
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/me/:
    get:
      operationId: apiV1MeRetrieve
      description: |-
        Return the full name of the authenticated user if the request is authenticated,
        or an error response if not.

        Request parameters:
        - request: the HTTP request object.

        Response:
        - 200 OK: the full name of the authenticated user.
        - 401 UNAUTHORIZED: if the request is not authenticated.

        Notes:
        - This view requires authentication to access the user information.
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/password/change/:
    post:
      operationId: apiV1PasswordChangeCreate
      summary: User password change
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          description: No response body
  /api/v1/profile/:
    post:
      operationId: apiV1ProfileCreate
      description: This class is a viewset that allows you to create and update a
        user's profile
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdate'
          description: ''
  /api/v1/profile/{slug}/:
    patch:
      operationId: apiV1ProfilePartialUpdate
      description: This class is a viewset that allows you to create and update a
        user's profile
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdateRequest'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdate'
          description: ''
  /api/v1/resend/verification/email/:
    post:
      operationId: apiV1ResendVerificationEmailCreate
      description: |-
        We are creating a serializer object with the data that we received from the request.

        We are validating the data and raising an exception if the data is not valid.

        We are getting the email from the validated data.

        We are getting the user object from the email.

        We are encoding the user id and creating a token.

        We are sending the email to the user.

        We are returning a response to the user.

        :param request: The request object
        :return: A response with a message and a status code of 200.
      summary: Resend verification email
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendVerificationEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendVerificationEmailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationEmailRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendVerificationEmail'
          description: ''
  /api/v1/reset-password/{uidb64}/{token}/:
    get:
      operationId: apiV1ResetPasswordRetrieve
      description: |-
        It checks if the user exists, if the token is valid, and if the token is expired

        :param request: The request object
        :param uidb64: The base64-encoded integer representation of the user's primary key
        :param token: The token generated by the PasswordResetTokenGenerator
      summary: Verify user token and uuid
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - Account
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: apiV1ResetPasswordCreate
      description: |-
        The function takes in a request, checks if the request is valid, if it is, it checks if the
        token is valid, if it is, it sets the password and sends an email to the user

        :param request: The request object
        :return: A response object is being returned.
      summary: Reset user password
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/signup/:
    post:
      operationId: apiV1SignupCreate
      summary: User signup
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUp'
          description: ''
  /api/v1/user-profile/:
    get:
      operationId: apiV1UserProfileRetrieve
      description: |-
        If the user is not verified, raise an error. Otherwise, return the user's profile

        :param request: The request object
        :return: The serialized data of the user.
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/v1/user-update/{id}/:
    put:
      operationId: apiV1UserUpdateUpdate
      summary: User Update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
    patch:
      operationId: apiV1UserUpdatePartialUpdate
      summary: User Update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
  /api/v1/verify/{uid}/{token}/:
    get:
      operationId: apiV1VerifyRetrieve
      description: |-
        It checks if the user exists, if the token is valid, if the user is already verified, and if
        not, it sets the user to active and verified

        :param request: The request object
        :param uid: The user id of the user who is trying to verify their account
        :param token: The token that was sent to the user's email
        :return: A response object with a message and a status code.
      summary: User account verify
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uid
        schema:
          type: string
        required: true
      tags:
      - Account
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    CountryEnum:
      enum:
      - AF
      - AX
      - AL
      - DZ
      - AS
      - AD
      - AO
      - AI
      - AQ
      - AG
      - AR
      - AM
      - AW
      - AU
      - AT
      - AZ
      - BS
      - BH
      - BD
      - BB
      - BY
      - BE
      - BZ
      - BJ
      - BM
      - BT
      - BO
      - BQ
      - BA
      - BW
      - BV
      - BR
      - IO
      - BN
      - BG
      - BF
      - BI
      - CV
      - KH
      - CM
      - CA
      - KY
      - CF
      - TD
      - CL
      - CN
      - CX
      - CC
      - CO
      - KM
      - CG
      - CD
      - CK
      - CR
      - CI
      - HR
      - CU
      - CW
      - CY
      - CZ
      - DK
      - DJ
      - DM
      - DO
      - EC
      - EG
      - SV
      - GQ
      - ER
      - EE
      - SZ
      - ET
      - FK
      - FO
      - FJ
      - FI
      - FR
      - GF
      - PF
      - TF
      - GA
      - GM
      - GE
      - DE
      - GH
      - GI
      - GR
      - GL
      - GD
      - GP
      - GU
      - GT
      - GG
      - GN
      - GW
      - GY
      - HT
      - HM
      - VA
      - HN
      - HK
      - HU
      - IS
      - IN
      - ID
      - IR
      - IQ
      - IE
      - IM
      - IL
      - IT
      - JM
      - JP
      - JE
      - JO
      - KZ
      - KE
      - KI
      - KW
      - KG
      - LA
      - LV
      - LB
      - LS
      - LR
      - LY
      - LI
      - LT
      - LU
      - MO
      - MG
      - MW
      - MY
      - MV
      - ML
      - MT
      - MH
      - MQ
      - MR
      - MU
      - YT
      - MX
      - FM
      - MD
      - MC
      - MN
      - ME
      - MS
      - MA
      - MZ
      - MM
      - NA
      - NR
      - NP
      - NL
      - NC
      - NZ
      - NI
      - NE
      - NG
      - NU
      - NF
      - KP
      - MK
      - MP
      - 'NO'
      - OM
      - PK
      - PW
      - PS
      - PA
      - PG
      - PY
      - PE
      - PH
      - PN
      - PL
      - PT
      - PR
      - QA
      - RE
      - RO
      - RU
      - RW
      - BL
      - SH
      - KN
      - LC
      - MF
      - PM
      - VC
      - WS
      - SM
      - ST
      - SA
      - SN
      - RS
      - SC
      - SL
      - SG
      - SX
      - SK
      - SI
      - SB
      - SO
      - ZA
      - GS
      - KR
      - SS
      - ES
      - LK
      - SD
      - SR
      - SJ
      - SE
      - CH
      - SY
      - TW
      - TJ
      - TZ
      - TH
      - TL
      - TG
      - TK
      - TO
      - TT
      - TN
      - TR
      - TM
      - TC
      - TV
      - UG
      - UA
      - AE
      - GB
      - UM
      - US
      - UY
      - UZ
      - VU
      - VE
      - VN
      - VG
      - VI
      - WF
      - EH
      - YE
      - ZM
      - ZW
      type: string
      description: |-
        * `AF` - Afghanistan
        * `AX` - Åland Islands
        * `AL` - Albania
        * `DZ` - Algeria
        * `AS` - American Samoa
        * `AD` - Andorra
        * `AO` - Angola
        * `AI` - Anguilla
        * `AQ` - Antarctica
        * `AG` - Antigua and Barbuda
        * `AR` - Argentina
        * `AM` - Armenia
        * `AW` - Aruba
        * `AU` - Australia
        * `AT` - Austria
        * `AZ` - Azerbaijan
        * `BS` - Bahamas
        * `BH` - Bahrain
        * `BD` - Bangladesh
        * `BB` - Barbados
        * `BY` - Belarus
        * `BE` - Belgium
        * `BZ` - Belize
        * `BJ` - Benin
        * `BM` - Bermuda
        * `BT` - Bhutan
        * `BO` - Bolivia
        * `BQ` - Bonaire, Sint Eustatius and Saba
        * `BA` - Bosnia and Herzegovina
        * `BW` - Botswana
        * `BV` - Bouvet Island
        * `BR` - Brazil
        * `IO` - British Indian Ocean Territory
        * `BN` - Brunei
        * `BG` - Bulgaria
        * `BF` - Burkina Faso
        * `BI` - Burundi
        * `CV` - Cabo Verde
        * `KH` - Cambodia
        * `CM` - Cameroon
        * `CA` - Canada
        * `KY` - Cayman Islands
        * `CF` - Central African Republic
        * `TD` - Chad
        * `CL` - Chile
        * `CN` - China
        * `CX` - Christmas Island
        * `CC` - Cocos (Keeling) Islands
        * `CO` - Colombia
        * `KM` - Comoros
        * `CG` - Congo
        * `CD` - Congo (the Democratic Republic of the)
        * `CK` - Cook Islands
        * `CR` - Costa Rica
        * `CI` - Côte d'Ivoire
        * `HR` - Croatia
        * `CU` - Cuba
        * `CW` - Curaçao
        * `CY` - Cyprus
        * `CZ` - Czechia
        * `DK` - Denmark
        * `DJ` - Djibouti
        * `DM` - Dominica
        * `DO` - Dominican Republic
        * `EC` - Ecuador
        * `EG` - Egypt
        * `SV` - El Salvador
        * `GQ` - Equatorial Guinea
        * `ER` - Eritrea
        * `EE` - Estonia
        * `SZ` - Eswatini
        * `ET` - Ethiopia
        * `FK` - Falkland Islands (Malvinas)
        * `FO` - Faroe Islands
        * `FJ` - Fiji
        * `FI` - Finland
        * `FR` - France
        * `GF` - French Guiana
        * `PF` - French Polynesia
        * `TF` - French Southern Territories
        * `GA` - Gabon
        * `GM` - Gambia
        * `GE` - Georgia
        * `DE` - Germany
        * `GH` - Ghana
        * `GI` - Gibraltar
        * `GR` - Greece
        * `GL` - Greenland
        * `GD` - Grenada
        * `GP` - Guadeloupe
        * `GU` - Guam
        * `GT` - Guatemala
        * `GG` - Guernsey
        * `GN` - Guinea
        * `GW` - Guinea-Bissau
        * `GY` - Guyana
        * `HT` - Haiti
        * `HM` - Heard Island and McDonald Islands
        * `VA` - Holy See
        * `HN` - Honduras
        * `HK` - Hong Kong
        * `HU` - Hungary
        * `IS` - Iceland
        * `IN` - India
        * `ID` - Indonesia
        * `IR` - Iran
        * `IQ` - Iraq
        * `IE` - Ireland
        * `IM` - Isle of Man
        * `IL` - Israel
        * `IT` - Italy
        * `JM` - Jamaica
        * `JP` - Japan
        * `JE` - Jersey
        * `JO` - Jordan
        * `KZ` - Kazakhstan
        * `KE` - Kenya
        * `KI` - Kiribati
        * `KW` - Kuwait
        * `KG` - Kyrgyzstan
        * `LA` - Laos
        * `LV` - Latvia
        * `LB` - Lebanon
        * `LS` - Lesotho
        * `LR` - Liberia
        * `LY` - Libya
        * `LI` - Liechtenstein
        * `LT` - Lithuania
        * `LU` - Luxembourg
        * `MO` - Macao
        * `MG` - Madagascar
        * `MW` - Malawi
        * `MY` - Malaysia
        * `MV` - Maldives
        * `ML` - Mali
        * `MT` - Malta
        * `MH` - Marshall Islands
        * `MQ` - Martinique
        * `MR` - Mauritania
        * `MU` - Mauritius
        * `YT` - Mayotte
        * `MX` - Mexico
        * `FM` - Micronesia (Federated States of)
        * `MD` - Moldova
        * `MC` - Monaco
        * `MN` - Mongolia
        * `ME` - Montenegro
        * `MS` - Montserrat
        * `MA` - Morocco
        * `MZ` - Mozambique
        * `MM` - Myanmar
        * `NA` - Namibia
        * `NR` - Nauru
        * `NP` - Nepal
        * `NL` - Netherlands
        * `NC` - New Caledonia
        * `NZ` - New Zealand
        * `NI` - Nicaragua
        * `NE` - Niger
        * `NG` - Nigeria
        * `NU` - Niue
        * `NF` - Norfolk Island
        * `KP` - North Korea
        * `MK` - North Macedonia
        * `MP` - Northern Mariana Islands
        * `NO` - Norway
        * `OM` - Oman
        * `PK` - Pakistan
        * `PW` - Palau
        * `PS` - Palestine, State of
        * `PA` - Panama
        * `PG` - Papua New Guinea
        * `PY` - Paraguay
        * `PE` - Peru
        * `PH` - Philippines
        * `PN` - Pitcairn
        * `PL` - Poland
        * `PT` - Portugal
        * `PR` - Puerto Rico
        * `QA` - Qatar
        * `RE` - Réunion
        * `RO` - Romania
        * `RU` - Russia
        * `RW` - Rwanda
        * `BL` - Saint Barthélemy
        * `SH` - Saint Helena, Ascension and Tristan da Cunha
        * `KN` - Saint Kitts and Nevis
        * `LC` - Saint Lucia
        * `MF` - Saint Martin (French part)
        * `PM` - Saint Pierre and Miquelon
        * `VC` - Saint Vincent and the Grenadines
        * `WS` - Samoa
        * `SM` - San Marino
        * `ST` - Sao Tome and Principe
        * `SA` - Saudi Arabia
        * `SN` - Senegal
        * `RS` - Serbia
        * `SC` - Seychelles
        * `SL` - Sierra Leone
        * `SG` - Singapore
        * `SX` - Sint Maarten (Dutch part)
        * `SK` - Slovakia
        * `SI` - Slovenia
        * `SB` - Solomon Islands
        * `SO` - Somalia
        * `ZA` - South Africa
        * `GS` - South Georgia and the South Sandwich Islands
        * `KR` - South Korea
        * `SS` - South Sudan
        * `ES` - Spain
        * `LK` - Sri Lanka
        * `SD` - Sudan
        * `SR` - Suriname
        * `SJ` - Svalbard and Jan Mayen
        * `SE` - Sweden
        * `CH` - Switzerland
        * `SY` - Syria
        * `TW` - Taiwan
        * `TJ` - Tajikistan
        * `TZ` - Tanzania
        * `TH` - Thailand
        * `TL` - Timor-Leste
        * `TG` - Togo
        * `TK` - Tokelau
        * `TO` - Tonga
        * `TT` - Trinidad and Tobago
        * `TN` - Tunisia
        * `TR` - Türkiye
        * `TM` - Turkmenistan
        * `TC` - Turks and Caicos Islands
        * `TV` - Tuvalu
        * `UG` - Uganda
        * `UA` - Ukraine
        * `AE` - United Arab Emirates
        * `GB` - United Kingdom
        * `UM` - United States Minor Outlying Islands
        * `US` - United States of America
        * `UY` - Uruguay
        * `UZ` - Uzbekistan
        * `VU` - Vanuatu
        * `VE` - Venezuela
        * `VN` - Vietnam
        * `VG` - Virgin Islands (British)
        * `VI` - Virgin Islands (U.S.)
        * `WF` - Wallis and Futuna
        * `EH` - Western Sahara
        * `YE` - Yemen
        * `ZM` - Zambia
        * `ZW` - Zimbabwe
    ForgotPassword:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    PasswordChangeRequest:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        new_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        confirm_new_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
      required:
      - confirm_new_password
      - new_password
      - old_password
    PatchedProfileUpdateRequest:
      type: object
      properties:
        slug:
          type: string
          nullable: true
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        avatar:
          type: string
          format: binary
          nullable: true
        facebook:
          type: string
          nullable: true
          maxLength: 255
        instagram:
          type: string
          nullable: true
          maxLength: 255
        linkedIn:
          type: string
          nullable: true
          maxLength: 500
        twitter:
          type: string
          nullable: true
          maxLength: 500
        user:
          type: integer
    PatchedUserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 64
        last_name:
          type: string
          minLength: 1
          maxLength: 64
        contact:
          type: string
          minLength: 1
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        country:
          $ref: '#/components/schemas/CountryEnum'
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          nullable: true
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        avatar:
          type: string
          format: uri
          nullable: true
        facebook:
          type: string
          nullable: true
          maxLength: 255
        instagram:
          type: string
          nullable: true
          maxLength: 255
        linkedIn:
          type: string
          nullable: true
          maxLength: 500
        twitter:
          type: string
          nullable: true
          maxLength: 500
      required:
      - created_at
      - id
      - updated_at
      - user
    ProfileUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          nullable: true
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        avatar:
          type: string
          format: uri
          nullable: true
        facebook:
          type: string
          nullable: true
          maxLength: 255
        instagram:
          type: string
          nullable: true
          maxLength: 255
        linkedIn:
          type: string
          nullable: true
          maxLength: 500
        twitter:
          type: string
          nullable: true
          maxLength: 500
        user:
          type: integer
      required:
      - created_at
      - id
      - updated_at
      - user
    ProfileUpdateRequest:
      type: object
      properties:
        slug:
          type: string
          nullable: true
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        avatar:
          type: string
          format: binary
          nullable: true
        facebook:
          type: string
          nullable: true
          maxLength: 255
        instagram:
          type: string
          nullable: true
          maxLength: 255
        linkedIn:
          type: string
          nullable: true
          maxLength: 500
        twitter:
          type: string
          nullable: true
          maxLength: 500
        user:
          type: integer
      required:
      - user
    ResendVerificationEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ResendVerificationEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    ResetPasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        confirm_new_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
      required:
      - confirm_new_password
      - new_password
    SignUp:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        password:
          type: string
          maxLength: 128
        confirm_password:
          type: string
          maxLength: 128
        contact:
          type: string
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        country:
          $ref: '#/components/schemas/CountryEnum'
      required:
      - confirm_password
      - country
      - email
      - first_name
      - last_name
      - password
    SignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 64
        last_name:
          type: string
          minLength: 1
          maxLength: 64
        password:
          type: string
          minLength: 1
          maxLength: 128
        confirm_password:
          type: string
          minLength: 1
          maxLength: 128
        contact:
          type: string
          minLength: 1
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        country:
          $ref: '#/components/schemas/CountryEnum'
      required:
      - confirm_password
      - country
      - email
      - first_name
      - last_name
      - password
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/Profile'
        country:
          $ref: '#/components/schemas/CountryEnum'
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        contact:
          type: string
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        verification_link_expiration:
          type: string
          format: date-time
          nullable: true
        is_verified:
          type: boolean
          readOnly: true
          title: Verified
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - contact
      - country
      - created_at
      - email
      - first_name
      - id
      - is_superuser
      - is_verified
      - last_login
      - last_name
      - profile
      - updated_at
    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        contact:
          type: string
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        country:
          $ref: '#/components/schemas/CountryEnum'
      required:
      - contact
      - country
      - first_name
      - last_name
    UserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 64
        last_name:
          type: string
          minLength: 1
          maxLength: 64
        contact:
          type: string
          minLength: 1
          pattern: ^\+?[1-9][0-9]{7,14}$
          maxLength: 17
        country:
          $ref: '#/components/schemas/CountryEnum'
      required:
      - contact
      - country
      - first_name
      - last_name
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
